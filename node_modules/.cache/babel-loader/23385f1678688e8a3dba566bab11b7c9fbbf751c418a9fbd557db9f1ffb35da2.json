{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Projects\\\\tic_tac_toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './Styles/App.css';\nimport Box9x9 from \"./Components/Box9x9/Box9x9\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = 'rgb(220, 20, 60)';\nconst blue = 'rgb(0, 191, 255)';\nconst marker = 'rgb(0, 40, 255)';\nconst box_border = '3px solid ' + marker;\nconst number_trans = {\n  \"1\": 'One',\n  \"2\": 'Two',\n  \"3\": 'Three',\n  \"4\": 'Four',\n  \"5\": 'Five',\n  \"6\": 'Six',\n  \"7\": 'Seven',\n  \"8\": 'Eight',\n  \"9\": 'Nine'\n};\nfunction App() {\n  _s();\n  let [lastColor, setLastColor] = useState('');\n  let [lastId, setLastId] = useState('');\n  let [boxId, setBoxID] = useState('Five');\n  //Меняет цвет блока, переключая его при ходе.\n  function changeColor(sid, box_id) {\n    const box = document.getElementById(boxId);\n    const elem = document.getElementById(sid); // Блок, на который мы кликаем\n    const prevElem = document.getElementById(lastId); //Блок, на который мы в прошлый раз кликнули(по умолчанию == NUll)\n    var typecolor = window.getComputedStyle(elem, null).backgroundColor; //Цвет заднего фона блока\n    var bordercolor = window.getComputedStyle(elem, null).border; // Параметры границ блока\n    var activebox = window.getComputedStyle(box, null).border;\n    if (typecolor === 'rgba(0, 0, 0, 0)' && activebox === box_border) {\n      //проверка, что кликаем не на закрашенный блок\n      if (lastColor === red) {\n        //определяем цвет, с помощью предыдущего, чтобы не перекрашивать блоки.\n        typecolor = blue;\n        setLastColor(typecolor);\n        setLastId(sid);\n        setBoxID(number_trans[sid[9]]);\n      } else {\n        typecolor = red;\n        setLastColor(typecolor);\n        setLastId(sid);\n        setBoxID(number_trans[sid[9]]);\n      }\n      box.style.border = '3px solid red';\n      elem.style.backgroundColor = typecolor;\n      elem.style.border = '2px solid ' + marker; // перекрашиваем границу последнего кликнутого блока\n      if (prevElem != null) {\n        //возвращаем цвет границы назад\n        prevElem.style.border = '2px solid gold';\n      }\n      console.log(sid, lastColor, lastId, typecolor, bordercolor, activebox, boxId); // Отладка\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Box9x9, {\n      getId: changeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hSajn/YfLFa3+Zw6LLDntgx6Izs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Box9x9","jsxDEV","_jsxDEV","red","blue","marker","box_border","number_trans","App","_s","lastColor","setLastColor","lastId","setLastId","boxId","setBoxID","changeColor","sid","box_id","box","document","getElementById","elem","prevElem","typecolor","window","getComputedStyle","backgroundColor","bordercolor","border","activebox","style","console","log","className","children","getId","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Projects/tic_tac_toe/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './Styles/App.css'\nimport Box9x9 from \"./Components/Box9x9/Box9x9\";\n\nconst red = 'rgb(220, 20, 60)';\nconst blue = 'rgb(0, 191, 255)';\nconst marker = 'rgb(0, 40, 255)';\nconst box_border = ('3px solid ' + marker);\nconst number_trans = {\n  \"1\": 'One',\n  \"2\": 'Two',\n  \"3\": 'Three',\n  \"4\": 'Four',\n  \"5\": 'Five',\n  \"6\": 'Six',\n  \"7\": 'Seven',\n  \"8\": 'Eight',\n  \"9\": 'Nine'\n}\n\nfunction App() {\n  let [lastColor, setLastColor] = useState('');\n  let [lastId, setLastId] = useState('');\n  let [boxId, setBoxID] = useState('Five');\n  //Меняет цвет блока, переключая его при ходе.\n  function changeColor(sid, box_id){\n    const box = document.getElementById(boxId); \n    const elem = document.getElementById(sid); // Блок, на который мы кликаем\n    const prevElem = document.getElementById(lastId); //Блок, на который мы в прошлый раз кликнули(по умолчанию == NUll)\n    var typecolor = window.getComputedStyle(elem, null).backgroundColor; //Цвет заднего фона блока\n    var bordercolor = window.getComputedStyle(elem, null).border; // Параметры границ блока\n    var activebox = window.getComputedStyle(box, null).border;\n    if (typecolor === 'rgba(0, 0, 0, 0)' && activebox === box_border){ //проверка, что кликаем не на закрашенный блок\n      if (lastColor === red){ //определяем цвет, с помощью предыдущего, чтобы не перекрашивать блоки.\n        typecolor = blue;\n        setLastColor(typecolor);\n        setLastId(sid);\n        setBoxID(number_trans[sid[9]]);\n      }\n      else{\n        typecolor = red;\n        setLastColor(typecolor);\n        setLastId(sid);\n        setBoxID(number_trans[sid[9]]);\n    }\n    box.style.border = ('3px solid red')\n    elem.style.backgroundColor = typecolor;\n    elem.style.border = ('2px solid ' + marker); // перекрашиваем границу последнего кликнутого блока\n    if (prevElem != null){ //возвращаем цвет границы назад\n      prevElem.style.border = ('2px solid gold');\n    }\n\n    console.log(sid, lastColor, lastId, typecolor, bordercolor, activebox, boxId); // Отладка\n    }\n  }\n  return (\n    <div className=\"App\" >\n      <Box9x9 getId={changeColor}/>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}